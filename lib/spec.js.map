{"version":3,"sources":["spec.js"],"names":[],"mappings":"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","file":"spec.js","sourcesContent":["import Mocha from 'mocha';\nimport colors from 'colors/safe';\n\nconst inherits = Mocha.utils.inherits;\nconst Base     = Mocha.reporters.Base;\nconst cursor   = Base.cursor;\n\n/**\n * Initialize a new `GherkinSpec` test reporter.\n *\n * @api public\n * @param {Runner} runner\n */\nfunction GherkinSpec(runner) {\n  Base.call(this, runner);\n\n  let indents = 0;\n  let n       = 0;\n\n  if (!Base.useColors) {\n    colors.enabled = false;\n  }\n\n  function indent() {\n    return Array(indents).join('  ');\n  }\n\n  runner.on('start', () => {\n    console.log();\n  });\n\n  runner.on('suite', (suite) => {\n    ++indents;\n\n    let text = suite.title;\n    switch (suite.name) {\n      case 'Feature':\n        text = colors.underline.bold(suite.title);\n        suite.stories.forEach((story) => {\n          text += '\\n' + indent() + '  ' + (story);\n        });\n        break;\n      case 'Scenario':\n        text = colors.green(suite.title);\n        break;\n      default:\n        text = Base.color('suite', text);\n    }\n    console.log(indent() + text);\n  });\n\n  runner.on('suite end', () => {\n    --indents;\n    if (indents === 1) {\n      console.log();\n    }\n  });\n\n  runner.on('pending', (test) => {\n    console.log(indent() + '  ' + colors.cyan('- ' + test.title));\n  });\n\n  runner.on('pass', (test) => {\n    let fmt = indent() + colors.green('  ' + Base.symbols.ok + ' %s');\n    if (test.speed === 'fast') {\n      cursor.CR();\n      console.log(fmt, test.title);\n    } else {\n      fmt += Base.color(test.speed, ' (%dms)');\n      cursor.CR();\n      console.log(fmt, test.title, test.duration);\n    }\n  });\n\n  runner.on('fail', (test) => {\n    cursor.CR();\n    console.log(indent() + '  ' + colors.red('%d) %s'), ++n, test.title);\n  });\n\n  runner.on('end', this.epilogue.bind(this));\n}\n\n// Inherit from `Base.prototype`.\ninherits(GherkinSpec, Base);\n\n// Expose `GherkinSpec`.\nexports = module.exports = GherkinSpec;\n"],"sourceRoot":""}
