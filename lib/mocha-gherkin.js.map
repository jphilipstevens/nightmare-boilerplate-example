{"version":3,"sources":["mocha-gherkin.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,OA3BA,UAAA,CA2BA,eAAA,CAAA,GAAA,SAAA,YAAA,CAAA,KAAA,EAAA;AACA,SA5BA,UAAA,CA4BA,GAAA,CAAA,KAAA,CAAA,CAAA;;AAEA,OAAA,CAAA,EAAA,CAAA,aAAA,EAAA,UAAA,OAAA,EAAA;;;;;;;;;;;;AAYA,WAAA,CAAA,OAAA,GAAA,UAAA,KAAA,EAAA;wCAAA,IAAA;AAAA,YAAA;;;AACA,UAAA,EAAA,GAAA,IAAA,CAAA,IAAA,CAAA,MAAA,GAAA,CAAA,CAAA,CAAA;;AAEA,UAAA,OAAA,GAAA,IAAA,CAAA;AACA,UAAA,IAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,eAAA,GAAA,EAAA,CAAA;AACA,aAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,IAAA,CAAA,MAAA,GAAA,CAAA,EAAA,CAAA,EAAA,EAAA;AACA,iBAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA,CAAA;SACA;OACA;;AAEA,UAAA,QAAA,GAAA,OAAA,CAAA,QAAA,CAAA,WAAA,GAAA,KAAA,EAAA,EAAA,CAAA,CAAA;AACA,cAAA,CAAA,IAAA,GAAA,SAAA,CAAA;AACA,cAAA,CAAA,OAAA,GAAA,OAAA,CAAA;;AAEA,aAAA,QAAA,CAAA;KACA;;;;;;;;;AAAA,AASA,WAAA,CAAA,QAAA,GAAA,UAAA,KAAA,EAAA,EAAA,EAAA;AACA,UAAA,QAAA,GAAA,OAAA,CAAA,QAAA,CAAA,YAAA,GAAA,KAAA,EAAA,EAAA,CAAA,CAAA;AACA,cAAA,CAAA,IAAA,GAAA,UAAA,CAAA;;AAEA,aAAA,QAAA,CAAA;KACA;;;;;;;;;;;;;;;;AAAA,AAgBA,QAAA,OAAA,GAAA,CAAA,OAAA,EAAA,MAAA,EAAA,MAAA,EAAA,KAAA,EAAA,KAAA,CAAA,CAAA;AACA,WAAA,CAAA,OAAA,CAAA,UAAA,MAAA,EAAA;AACA,aAAA,CAAA,MAAA,CAAA,GAAA,UAAA,KAAA,EAAA,EAAA,EAAA;AACA,YAAA,IAAA,GAAA,OAAA,CAAA,EAAA,CAAA,MAAA,GAAA,GAAA,GAAA,KAAA,EAAA,EAAA,CAAA,CAAA;AACA,YAAA,CAAA,IAAA,GAAA,MAAA,CAAA;;AAEA,eAAA,IAAA,CAAA;OACA,CAAA;KACA,CAAA,CAAA;GACA,CAAA,CAAA;CACA,CAAA;kBACA,OAnGA,UAAA,CAmGA,eAAA,CAAA","file":"mocha-gherkin.js","sourcesContent":["import { interfaces } from 'mocha';\n\n/**\n * Gherkin-style interface:\n *\n * Feature('Serve coffee',\n *   'Coffee should not be served until paid for',\n *   'Coffee should not be served until the button has been pressed',\n *   'If there is no coffee left then money should be refunded', function () {\n *   Scenario('Buy last coffee', function () {\n *     Given('there are 1 coffees left in the machine', function () {\n *       // ...\n *     });\n *     And('I have deposited 1$', function () {\n *       // ...\n *     });\n *     When('I press the coffee button', function () {\n *       // ...\n *     });\n *     Then('I should be served a coffee', function () {\n *       // ...\n *     });\n *   });\n * });\n *\n * @param {Suite} suite\n */\ninterfaces['mocha-gherkin'] = function mochaGherkin(suite) {\n  interfaces.bdd(suite);\n\n  suite.on('pre-require', (context) => {\n    /**\n     * Some terse yet descriptive text of what is desired.\n     *\n     * @param {String} title\n     * @param {...Mixed} args\n     *   Textual description of the business value of this feature.\n     *     Business rules that govern the scope of the feature.\n     *     Any additional information that will make the feature easier to understand.\n     *   and a function to test.\n     * @return {Suite} newSuite\n     */\n    context.Feature = (title, ...args) => {\n      const fn = args[args.length - 1];\n\n      let stories = null;\n      if (args.length > 1) {\n        stories = [];\n        for (let i = 0; i < args.length - 1; i++) {\n          stories.push(args[i]);\n        }\n      }\n\n      const newSuite = context.describe('Feature: ' + title, fn);\n      newSuite.name = 'Feature';\n      newSuite.stories = stories;\n\n      return newSuite;\n    };\n\n    /**\n     * Some determinable business situation.\n     *\n     * @param {String} title\n     * @param {Function} fn\n     * @return {Suite} newSuite\n     */\n    context.Scenario = (title, fn) => {\n      const newSuite = context.describe('Scenario: ' + title, fn);\n      newSuite.name = 'Scenario';\n\n      return newSuite;\n    };\n\n    /**\n     * Given some precondition\n     * And some other precondition\n     * When some action by the actor\n     * And some other action\n     * And yet another action\n     * Then some testable outcome is achieved\n     * And something else we can check happens too\n     * But yet another we can check does not happen\n     *\n     * @param {String} title\n     * @param {Function} fn\n     * @return {Suite} test\n     */\n    const clauses = ['Given', 'When', 'Then', 'And', 'But'];\n    clauses.forEach((clause) => {\n      context[clause] = (title, fn) => {\n        const test = context.it(clause + ' ' + title, fn);\n        test.name = clause;\n\n        return test;\n      };\n    });\n  });\n};\nexport default interfaces['mocha-gherkin'];\n"],"sourceRoot":""}
